'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = fetchWrapper;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/* eslint-disable no-param-reassign */

function fetchWrapper(reqFromRelay, middlewares) {
  var fetchAfterAllWrappers = function fetchAfterAllWrappers(req) {
    var url = req.url,
        opts = _objectWithoutProperties(req, ['url']);

    if (!url) {
      if (req.relayReqType === 'batch-query') {
        url = '/graphql/batch';
      } else {
        url = '/graphql';
      }
    }

    return fetch(url, opts).then(function (res) {
      return (
        // sub-promise for combining `res` with parsed json
        res.json().then(function (json) {
          res.json = json;
          return res;
        }).catch(function (e) {
          console.warn('error parsing response json', e); // eslint-disable-line no-console
          res.json = {};
          return res;
        })
      );
    });
  };

  var wrappedFetch = compose.apply(undefined, _toConsumableArray(middlewares))(fetchAfterAllWrappers);

  return wrappedFetch(reqFromRelay).then(throwOnServerError).then(function (res) {
    return res.json;
  });
}

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */
function compose() {
  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  if (funcs.length === 0) {
    return function (arg) {
      return arg;
    };
  } else {
    var last = funcs[funcs.length - 1];
    var rest = funcs.slice(0, -1);
    return function () {
      return rest.reduceRight(function (composed, f) {
        return f(composed);
      }, last.apply(undefined, arguments));
    };
  }
}

function throwOnServerError(response) {
  if (response.status >= 200 && response.status < 300) {
    return response;
  }

  throw response;
}