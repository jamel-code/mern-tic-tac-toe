'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mutation;

var _formatRequestErrors = require('../formatRequestErrors');

var _formatRequestErrors2 = _interopRequireDefault(_formatRequestErrors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mutation(relayRequest, fetchWithMiddleware) {
  var req = {
    method: 'POST',
    relayReqId: Date.now(),
    relayReqObj: relayRequest,
    relayReqType: 'mutation'
  };

  if (_hasFiles(relayRequest)) {
    Object.assign(req, _mutationWithFiles(relayRequest));
  } else {
    Object.assign(req, _mutation(relayRequest));
  }

  return fetchWithMiddleware(req).then(function (payload) {
    if ({}.hasOwnProperty.call(payload, 'errors')) {
      var error = new Error('Server request for mutation `' + relayRequest.getDebugName() + '` ' + 'failed for the following reasons:\n\n' + (0, _formatRequestErrors2.default)(relayRequest, payload.errors));
      error.source = payload;
      relayRequest.reject(error);
    } else {
      relayRequest.resolve({ response: payload.data });
    }
  }).catch(function (error) {
    return relayRequest.reject(error);
  });
} /* eslint-disable no-param-reassign, no-use-before-define, prefer-template */

function _hasFiles(relayRequest) {
  return !!(relayRequest.getFiles && relayRequest.getFiles());
}

function _mutationWithFiles(relayRequest) {
  var req = {
    headers: {}
  };

  if (_hasFiles(relayRequest)) {
    var files = relayRequest.getFiles();

    if (!global.FormData) {
      throw new Error('Uploading files without `FormData` not supported.');
    }
    var formData = new FormData();
    formData.append('query', relayRequest.getQueryString());
    formData.append('variables', JSON.stringify(relayRequest.getVariables()));
    Object.keys(files).forEach(function (filename) {
      if (Array.isArray(files[filename])) {
        files[filename].forEach(function (file) {
          formData.append(filename, file);
        });
      } else {
        formData.append(filename, files[filename]);
      }
    });
    req.body = formData;
  }

  return req;
}

function _mutation(relayRequest) {
  var req = {
    headers: {
      Accept: '*/*',
      'Content-Type': 'application/json'
    }
  };

  req.body = JSON.stringify({
    query: relayRequest.getQueryString(),
    variables: relayRequest.getVariables()
  });

  return req;
}