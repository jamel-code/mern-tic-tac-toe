'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = authMiddleware;

var _utils = require('../utils');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable no-param-reassign, arrow-body-style, dot-notation */

var WrongTokenError = function (_Error) {
  _inherits(WrongTokenError, _Error);

  function WrongTokenError(msg) {
    var res = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, WrongTokenError);

    var _this = _possibleConstructorReturn(this, (WrongTokenError.__proto__ || Object.getPrototypeOf(WrongTokenError)).call(this, msg));

    _this.res = res;
    _this.name = 'WrongTokenError';
    return _this;
  }

  return WrongTokenError;
}(Error);

function authMiddleware() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var tokenOrThunk = opts.token,
      tokenRefreshPromise = opts.tokenRefreshPromise,
      _opts$allowEmptyToken = opts.allowEmptyToken,
      allowEmptyToken = _opts$allowEmptyToken === undefined ? false : _opts$allowEmptyToken,
      _opts$prefix = opts.prefix,
      prefix = _opts$prefix === undefined ? 'Bearer ' : _opts$prefix,
      _opts$header = opts.header,
      header = _opts$header === undefined ? 'Authorization' : _opts$header;


  var tokenRefreshInProgress = null;

  return function (next) {
    return function (req) {
      return new Promise(function (resolve, reject) {
        var token = (0, _utils.isFunction)(tokenOrThunk) ? tokenOrThunk(req) : tokenOrThunk;
        if (!token && tokenRefreshPromise && !allowEmptyToken) {
          reject(new WrongTokenError('Token not provided, try fetch new one'));
        }
        resolve(token);
      }).then(function (token) {
        if (token) {
          req.headers[header] = '' + prefix + token;
        }
        return next(req);
      }).then(function (res) {
        if (res.status === 401 && tokenRefreshPromise) {
          throw new WrongTokenError('Received status 401 from server', res);
        }
        return res;
      }).catch(function (err) {
        if (err.name === 'WrongTokenError') {
          if (!tokenRefreshInProgress) {
            tokenRefreshInProgress = tokenRefreshPromise(req, err.res).then(function (newToken) {
              tokenRefreshInProgress = null;
              return newToken;
            });
          }

          return tokenRefreshInProgress.then(function (newToken) {
            req.headers[header] = '' + prefix + newToken;
            return next(req); // re-run query with new token
          });
        }

        throw err;
      });
    };
  };
}